$date
	Thu Jun 19 00:22:07 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_posit16_adder $end
$var wire 16 ! posit_sum [15:0] $end
$var reg 16 " posit_a [15:0] $end
$var reg 16 # posit_b [15:0] $end
$scope module uut $end
$var wire 16 $ posit_a [15:0] $end
$var wire 16 % posit_b [15:0] $end
$var wire 1 & sign_b $end
$var wire 1 ' sign_a $end
$var wire 8 ( scale_b [7:0] $end
$var wire 8 ) scale_a [7:0] $end
$var wire 5 * regime_b [4:0] $end
$var wire 5 + regime_a [4:0] $end
$var wire 1 , is_zero_b $end
$var wire 1 - is_zero_a $end
$var wire 1 . is_nar_b $end
$var wire 1 / is_nar_a $end
$var wire 14 0 fraction_b [13:0] $end
$var wire 14 1 fraction_a [13:0] $end
$var wire 2 2 exponent_b [1:0] $end
$var wire 2 3 exponent_a [1:0] $end
$var reg 17 4 aligned_mant_a [16:0] $end
$var reg 17 5 aligned_mant_b [16:0] $end
$var reg 5 6 leading_zeros [4:0] $end
$var reg 16 7 mant_a [15:0] $end
$var reg 16 8 mant_b [15:0] $end
$var reg 16 9 posit_sum [15:0] $end
$var reg 16 : result_mant_norm [15:0] $end
$var reg 8 ; result_scale [7:0] $end
$var reg 1 < result_sign $end
$var reg 8 = scale_diff [7:0] $end
$var reg 17 > sum_mant [16:0] $end
$scope function encode_posit $end
$var reg 8 ? adj_scale [7:0] $end
$var reg 2 @ exp_val [1:0] $end
$var reg 14 A fraction [13:0] $end
$var reg 4 B regime_bits [3:0] $end
$var reg 5 C regime_val [4:0] $end
$var reg 8 D scale [7:0] $end
$var reg 1 E sign $end
$var reg 16 F temp_posit [15:0] $end
$var integer 32 G i [31:0] $end
$upscope $end
$scope module decoder_a $end
$var wire 16 H posit_in [15:0] $end
$var reg 16 I abs_posit [15:0] $end
$var reg 2 J exponent [1:0] $end
$var reg 14 K fraction [13:0] $end
$var reg 1 / is_nar $end
$var reg 1 - is_zero $end
$var reg 5 L regime [4:0] $end
$var reg 4 M regime_length [3:0] $end
$var reg 5 N regime_value [4:0] $end
$var reg 15 O remaining_bits [14:0] $end
$var reg 1 ' sign $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope module decoder_b $end
$var wire 16 Q posit_in [15:0] $end
$var reg 16 R abs_posit [15:0] $end
$var reg 2 S exponent [1:0] $end
$var reg 14 T fraction [13:0] $end
$var reg 1 . is_nar $end
$var reg 1 , is_zero $end
$var reg 5 U regime [4:0] $end
$var reg 4 V regime_length [3:0] $end
$var reg 5 W regime_value [4:0] $end
$var reg 15 X remaining_bits [14:0] $end
$var reg 1 & sign $end
$var integer 32 Y i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx Y
bx X
bx W
bx V
b0 U
b0 T
b0 S
bx R
b0 Q
bx P
bx O
bx N
bx M
b0 L
b0 K
b0 J
bx I
b0 H
b1110 G
bx0xx000000000000 F
xE
bx D
bx C
bx B
b0 A
bx @
bx ?
bx >
bx =
x<
bx ;
b0 :
b0 9
b1xxxxxxxxxxxxxx 8
b1xxxxxxxxxxxxxx 7
b10000 6
b1xxxxxxxxxxxxxx 5
bx 4
b0 3
b0 2
b0 1
b0 0
0/
0.
1-
1,
b0 +
b0 *
b11000100 )
b11000100 (
0'
0&
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#10000
b101000000000000 !
b101000000000000 9
b0xxx 1
b0xxx K
b10 3
b10 J
b110 )
b10000 +
b10000 L
b11111111111111111111111111111110 P
b0 N
b1 M
b101000000000000 O
b101000000000000 I
0-
b101000000000000 "
b101000000000000 $
b101000000000000 H
#20000
b1000000000000000 !
b1000000000000000 9
1.
0,
1&
b1000000000000000 #
b1000000000000000 %
b1000000000000000 Q
#30000
b110000000000000 !
b110000000000000 9
b1 G
b1101 B
b110000000000000 F
b10 @
b1100 C
b110010 ?
0E
b11110110 D
0<
b11110110 ;
b100000000000x 4
b100000000000xxx 5
b11111110 =
b100000000000xxx 8
b100000000000xxx 7
b0xxx 0
b0xxx T
b10 2
b10 S
b110 (
b10000 *
b10000 U
b11111111111111111111111111111110 Y
b0 W
b1 V
b101000000000000 X
b101000000000000 R
0.
0&
b100 )
b0 3
b0 J
b11111111111111111111111111111110 P
b1 M
b100000000000000 O
b100000000000000 I
b101000000000000 #
b101000000000000 %
b101000000000000 Q
b100000000000000 "
b100000000000000 $
b100000000000000 H
#40000
b1100000000000000 !
b1100000000000000 9
b1110 B
b0 @
b1101 C
b110100 ?
1E
b11111000 D
1<
b100000000000x 5
b10000000000xxxx 4
b10 =
b10000000000xxxx 7
b11111111111111111111111111111110 Y
b1 V
1&
b0xxxx 1
b0xxxx K
b1000 )
b10001 +
b10001 L
b1 N
b11111111111111111111111111111110 P
b10 M
b110000000000000 O
b110000000000000 I
b0 G
b1100000000000000 F
b11111000 ;
b1011000000000000 #
b1011000000000000 %
b1011000000000000 Q
b110000000000000 "
b110000000000000 $
b110000000000000 H
#50000
b1110000000000000 !
b1110000000000000 9
b1101 B
b10 @
b1100 C
b110010 ?
b11110110 D
b100000000000xxx 5
b100000000000xxx 4
b0 =
b100000000000xxx 7
b0xxx 1
b0xxx K
b10 3
b10 J
b110 )
b10000 +
b10000 L
b11111111111111111111111111111110 P
b0 N
b1 M
b101000000000000 O
b101000000000000 I
b1 G
b1110000000000000 F
b11110110 ;
b101000000000000 "
b101000000000000 $
b101000000000000 H
#60000
b101000000000000 !
b101000000000000 9
b1 @
b110001 ?
0E
b11110101 D
0<
b101 (
b1 2
b1 S
b11111111111111111111111111111110 Y
b1 V
b100100000000000 X
b100100000000000 R
0&
b101 )
b1 3
b1 J
b11111111111111111111111111111110 P
b1 M
b100100000000000 O
b100100000000000 I
b1 G
b101000000000000 F
b11110101 ;
b100100000000000 #
b100100000000000 %
b100100000000000 Q
b100100000000000 "
b100100000000000 $
b100100000000000 H
#70000
b100000000000000 !
b100000000000000 9
b1110 B
b0 @
b1101 C
b110100 ?
b11111000 D
b1000000 5
b10000000000xxxx 4
b1000 =
b10000000000xxxx 7
b0 2
b0 S
b0 (
b1111 *
b1111 U
b11111 W
b11111111111111111111111111111110 Y
b1 V
b10000000000000 X
b10000000000000 R
b0xxxx 1
b0xxxx K
b0 3
b0 J
b1000 )
b10001 +
b10001 L
b1 N
b11111111111111111111111111111110 P
b10 M
b110000000000000 O
b110000000000000 I
b0 G
b100000000000000 F
b11111000 ;
b10000000000000 #
b10000000000000 %
b10000000000000 Q
b110000000000000 "
b110000000000000 $
b110000000000000 H
#100000
